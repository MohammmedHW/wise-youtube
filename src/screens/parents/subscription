<View style={styles.subscriptionSection}>
              <Text style={styles.sectionTitle}>Subscription</Text>
              {isTrialActive ? (
                <TouchableOpacity
                  style={styles.subscriptionButton}
                  onPress={handleSubscriptionPress}>
                  <Text style={styles.subscriptionButtonText}>
                    Purchase Subscription
                  </Text>
                </TouchableOpacity>
              ) : (
                <>
                  <View style={styles.subscribedContainer}>
                    <TouchableOpacity
                      style={{
                        flexDirection: 'row',
                        gap: 10,
                        alignItems: 'center',
                      }}
                      onPress={() => refRBSheet.current.open()}>
                      <Text style={styles.subscribedText}>Subscribed</Text>
                      <MaterialIcons
                        name={'visibility'}
                        size={20}
                        color={AppColors.gray}
                        style={{marginBottom: 2}}
                      />
                    </TouchableOpacity>
                  </View>
                  <View style={{...styles.subscribedContainer, marginTop: 10}}>
                    <TouchableOpacity
                      style={{
                        flexDirection: 'row',
                        gap: 10,
                        alignItems: 'center',
                      }}
                      onPress={() => {
                        Alert.alert(
                          'Cancel Subscription',
                          `Your plan will not be auto renewed but you can watch until ${moment(
                            subscriptionDetails?.expiry_date,
                          ).format('D MMMM YYYY')}. No refunds will be made.`,
                          [
                            {text: 'No', onPress: () => {}, style: 'cancel'},
                            {
                              text: 'Yes',
                              onPress: () =>
                                Linking.openURL(
                                  'https://play.google.com/store/account/subscriptions',
                                ),
                            },
                          ],
                          {cancelable: false},
                        );
                      }}>
                      <Text style={{...styles.subscribedText, color: 'red'}}>
                        Cancel Subscription
                      </Text>
                    </TouchableOpacity>

                    {/* <Text style={styles.validTillText}>
                  Valid till - {subscriptionValidTill}
                </Text> */}
                  </View>
                  <TouchableOpacity
                    onPress={() =>
                      Linking.openURL('https://timesride.com/wisetube/faqs/')
                    }
                    style={{alignSelf: 'center' , marginTop:20}}>
                    <Text style={styles.signupPrompt}>
                      <Text
                        style={{
                          color: AppColors.theme,
                          fontFamily: AppFonts.SemiBold,
                          textDecorationLine: 'underline',
                        }}>
                        WiseTube Help Center
                      </Text>
                    </Text>
                     <Text style={{...styles.signupLink , textDecorationLine:'underline',textAlign:'center' , color:AppColors.theme ,fontFamily: AppFonts.SemiBold,}}>Help & FAQs</Text>
                  </TouchableOpacity>
                </>
              )}
            </View>





  const parentLogin = async () => {
    try {
      if (!userName || !password) {
        Alert.alert('Error', 'Please fill in all fields');
        return;
      }
      setisLoading(true);
      console.log('Attempting login with:', {email: userName, password});

      // First, sign in with Firebase using new approach
      // const app = getApp();
      // const auth = getAuth(app);
      // const userCredential = await signInWithEmailAndPassword(auth, userName, password);
      // console.log('Firebase auth successful:', userCredential.user.uid);
      //  const resssss = await  getUserByEmail(userName)

      let showTrialAlert = false;
      //  if (resssss?.data?.last_loggedIn==null) {
      //   showTrialAlert = true
      //  }
      // Then proceed with your API login
      const response = await Auth.login({
        action: 'login',
        email: userName,
        password: password,
      });
      console.log('Login response:', response);

      if (response?.data?.status === 'success' && response?.data?.data?.token) {
        console.log('Login successful, storing data...');

        // Clear any existing data first
        await AsyncStorage.multiRemove([
          'userUserName',
          'userParentFirstName',
          'userParentLastName',
          'userParentEmail',
          'token',
          'userId',
          'role',
          'loginDate',
          'trialStatus',
        ]);

        // Store new data
        await AsyncStorage.multiSet([
          ['userUserName', response.data.data.email],
          ['userParentFirstName', response.data.data.first_name],
          ['userParentLastName', response.data.data.last_name],
          ['userParentEmail', response.data.data.email],
          ['token', response.data.data.token],
          ['userId', response.data.data.id.toString()],
          ['role', 'admin'],
          ['loginDate', new Date().toISOString()],
        ]);

        // Check if trial status exists
        const trialData = await SubscriptionService.getSubscription(userName);
        console.log('trialData from LoginScreen', trialData);
        if (!trialData) {
          // No trial data found, it will be handled by App.js
          console.log('No trial data found, will show trial screen');
          console.log('TCL: parentLogin -> showTrialAlert', showTrialAlert);
        }

        console.log('Data stored, calling onLoginSuccess');
        onLoginSuccess(response.data.data, showTrialAlert);
      } else {
        // If API login fails, sign out from Firebase
        const app = getApp();
        const auth = getAuth(app);
        await signOut(auth);
        console.log('Login failed - invalid response');
        Alert.alert('Error', response?.data?.message || 'Login failed');
      }
    } catch (error) {
      console.log('TCL: parentLogin -> error', error);
      // If any error occurs, sign out from Firebase
      const app = getApp();
      const auth = getAuth(app);
      await signOut(auth);
      console.log('Login error:', error);
      Alert.alert('Error', error?.response?.data?.message || 'Login failed');
    } finally {
      setisLoading(false);
    }
  };

  const handleGoogleLogin = async () => {
    try {
      const playServicesAvailable = await GoogleSignin.hasPlayServices();
      console.log('It is here ');

      const userInfo = await GoogleSignin.signIn();
      const {email, givenName, familyName, id} = userInfo.data.user;
      const {idToken} = userInfo.data;
      await AsyncStorage.multiSet([
        ['userUserName', email],
        ['userParentFirstName', givenName],
        ['userParentLastName', familyName],
        ['userParentEmail', email],
        ['role', 'admin'],
        ['token', idToken],
        ['userId', id.toString()],
      ]);
      onLoginSuccess();
      alert({
        type: DropdownAlertType.Success,
        title: 'Google Login Successful',
        message: 'You have successfully logged in via Google.',
      });
    } catch (error) {
      console.error('Detailed Google Sign-In Error:', {
        code: error.code,
        message: error.message,
        stack: error.stack,
      });
      Alert.alert('Error', `Google sign-in failed: ${error.message}`);
    }
  };




  